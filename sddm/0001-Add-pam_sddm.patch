From 530eedc1f184f27fb495aaa34e3c7832129b72d4 Mon Sep 17 00:00:00 2001
From: Howard Cheung <mail@h-cheung.cf>
Date: Sun, 15 May 2022 15:43:51 +0800
Subject: [PATCH 1/2] Add pam_sddm

---
 cmake/Findkeyutils.cmake    |  27 ++++++++
 src/CMakeLists.txt          |   1 +
 src/pam_sddm/CMakeLists.txt |  20 ++++++
 src/pam_sddm/pam_sddm.c     | 131 ++++++++++++++++++++++++++++++++++++
 4 files changed, 179 insertions(+)
 create mode 100644 cmake/Findkeyutils.cmake
 create mode 100644 src/pam_sddm/CMakeLists.txt
 create mode 100644 src/pam_sddm/pam_sddm.c

diff --git a/cmake/Findkeyutils.cmake b/cmake/Findkeyutils.cmake
new file mode 100644
index 0000000..d88bc07
--- /dev/null
+++ b/cmake/Findkeyutils.cmake
@@ -0,0 +1,27 @@
+# Try to find Keyutils
+# Once done, this will define
+#
+# KEYUTILS_FOUND - system has keyutils
+# KEYUTILS_INCLUDE_DIR - the keyutils include directories
+# KEYUTILS_LIBRARIES - link these to use keyutils
+
+find_path(KEYUTILS_INCLUDE_DIR keyutils.h PATHS
+  /opt/local/include
+  /usr/local/include
+)
+
+find_library(KEYUTILS_LIBRARIES NAMES keyutils)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(keyutils
+  DEFAULT_MSG KEYUTILS_LIBRARIES KEYUTILS_INCLUDE_DIR)
+
+mark_as_advanced(KEYUTILS_LIBRARIES KEYUTILS_INCLUDE_DIR)
+
+if(KEYUTILS_FOUND AND NOT (TARGET keyutils::keyutils))
+  add_library(keyutils::keyutils UNKNOWN IMPORTED)
+  set_target_properties(keyutils::keyutils PROPERTIES
+    INTERFACE_INCLUDE_DIRECTORIES "${KEYUTILS_INCLUDE_DIR}"
+    IMPORTED_LINK_INTERFACE_LANGUAGES "C"
+    IMPORTED_LOCATION "${KEYUTILS_LIBRARIES}")
+endif()
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 5b8ea94..bab1281 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -3,3 +3,4 @@ configure_file("common/Constants.h.in" "common/Constants.h" IMMEDIATE @ONLY)
 add_subdirectory(daemon)
 add_subdirectory(greeter)
 add_subdirectory(helper)
+add_subdirectory(pam_sddm)
diff --git a/src/pam_sddm/CMakeLists.txt b/src/pam_sddm/CMakeLists.txt
new file mode 100644
index 0000000..7681761
--- /dev/null
+++ b/src/pam_sddm/CMakeLists.txt
@@ -0,0 +1,20 @@
+include(KDEInstallDirs)
+
+find_package(PAM REQUIRED)
+find_package(keyutils REQUIRED)
+
+add_definitions(-DHAVE_KEYUTILS)
+
+include_directories(
+    ${PAM_INCLUDE_DIR}
+    ${KEYUTILS_INCLUDE_DIR}
+)
+
+add_library(pam_sddm SHARED pam_sddm.c)
+set_target_properties(pam_sddm PROPERTIES PREFIX "")
+target_link_libraries(pam_sddm
+    ${PAM_LIBRARIES}
+    ${KEYUTILS_LIBRARIES}
+)
+
+install(TARGETS pam_sddm DESTINATION ${KDE_INSTALL_LIBDIR}/security)
diff --git a/src/pam_sddm/pam_sddm.c b/src/pam_sddm/pam_sddm.c
new file mode 100644
index 0000000..ce96d97
--- /dev/null
+++ b/src/pam_sddm/pam_sddm.c
@@ -0,0 +1,131 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
+ * Copied from GNOME/gdm/pam_gdm/pam_gdm.c
+ *
+ * Copyright  (C) 2016 Red Hat, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ */
+//#include <config.h>
+
+#include <unistd.h>
+
+#include <security/_pam_macros.h>
+#include <security/pam_ext.h>
+#include <security/pam_misc.h>
+#include <security/pam_modules.h>
+#include <security/pam_modutil.h>
+
+#ifdef HAVE_KEYUTILS
+#include <keyutils.h>
+#endif
+
+int
+pam_sm_authenticate (pam_handle_t  *pamh,
+                     int            flags,
+                     int            argc,
+                     const char   **argv)
+{
+#ifdef HAVE_KEYUTILS
+        long r;
+        size_t cached_passwords_length;
+        char *cached_passwords = NULL;
+        char *last_cached_password = NULL;
+        key_serial_t serial;
+        size_t i;
+
+        serial = find_key_by_type_and_desc ("user", "cryptsetup", 0);
+        if (serial == 0)
+                return PAM_AUTHINFO_UNAVAIL;
+
+        r = keyctl_read_alloc (serial, &cached_passwords);
+        if (r < 0)
+                return PAM_AUTHINFO_UNAVAIL;
+        
+        cached_passwords_length = r;
+
+        /*
+            Find the last password in the NUL-separated list of passwords.
+            Multiple passwords are returned either when the user enters an
+            incorrect password or there are multiple encrypted drives.
+            In the case of an incorrect password the last one is correct.
+            In the case of multiple drives, choosing the last drive is as
+            arbitrary a choice as any other, but choosing the last password at
+            least supports multiple attempts on the last drive.
+        */
+        last_cached_password = cached_passwords;
+        for (i = 0; i < cached_passwords_length; i++) {
+                last_cached_password = cached_passwords + i;
+                i += strlen (last_cached_password);
+        }
+
+        r = pam_set_item (pamh, PAM_AUTHTOK, last_cached_password);
+
+        free (cached_passwords);
+
+        if (r < 0)
+                return PAM_AUTH_ERR;
+        else
+                return PAM_SUCCESS;
+#endif
+
+        return PAM_AUTHINFO_UNAVAIL;
+}
+
+int
+pam_sm_setcred (pam_handle_t *pamh,
+                int           flags,
+                int           argc,
+                const char  **argv)
+{
+        return PAM_SUCCESS;
+}
+
+int
+pam_sm_acct_mgmt (pam_handle_t  *pamh,
+                  int            flags,
+                  int            argc,
+                  const char   **argv)
+{
+        return PAM_SUCCESS;
+}
+
+int
+pam_sm_chauthtok (pam_handle_t  *pamh,
+                  int            flags,
+                  int            argc,
+                  const char   **argv)
+{
+        return PAM_SUCCESS;
+}
+
+int
+pam_sm_open_session (pam_handle_t  *pamh,
+                     int            flags,
+                     int            argc,
+                     const char   **argv)
+{
+        return PAM_SUCCESS;
+}
+
+int
+pam_sm_close_session (pam_handle_t  *pamh,
+                      int            flags,
+                      int            argc,
+                      const char   **argv)
+{
+        return PAM_SUCCESS;
+}
+
-- 
2.39.1

